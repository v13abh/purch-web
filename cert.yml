---

- hosts: all
  become: true

  vars_files:
  - my_vars.yml

  tasks:

    - name: Delete Old Cert Zip
      file:
        path: "cert.zip"
        state: absent
  
    - name: Delete Old Response File
      file:
        path: "Certificates.json"
        state: absent

#### When are we? #####################################################################################
                
    - name: Register Current Hour as End Time
      set_fact:
        end_time: "{{ ansible_date_time.hour }}:{{ ansible_date_time.minute }}"
   
    - name: Munge Epoch Time Minus 16 Minutes for Start Time
      set_fact:
        start_time: "{{ '%H:%M' | strftime( ( ansible_date_time.epoch | int ) - ( 60 * 16 )  ) }}"

    - name: Register Current Date
      set_fact:
        date: "{{ ansible_date_time.date }}"

#### Qualtrics All The Things! ##########################################################################
                
    - name: Create Qualtrics Response Export
      shell: |
        curl -X POST -H 'X-API-TOKEN: {{ cert_api_token }}' -H 'Content-Type: application/json' -d '{ 
        "surveyId": "{{ cert_survey_id }}",
        "format": "json",
        "startDate": "{{ date }}T{{ start_time }}:00-05:00",
        "endDate": "{{ date }}T{{ end_time }}:00-05:00",
        "useLabels": true
        }' 'https://ousurvey.qualtrics.com/API/v3/responseexports'
      register: cert_export

    - name: Register Qualtrics Request ID
      set_fact:
        cert_request_id: '{{ (cert_export.stdout | from_json).result.id }}'

    - name: Check Status of Qualtrics Response Export
      shell: |
        curl -H 'X-API-TOKEN: {{ cert_api_token }}' 'https://ousurvey.qualtrics.com/API/v3/responseexports/{{ cert_request_id }}'
      register: qualtrics_progress
      until: qualtrics_progress.stdout.find("100.0") != -1
      retries: 5
      delay: 5

    - name: Download Qualtrics Response Export
      shell: |
        curl -X GET -H "Content-Type: application/json" -H "X-API-TOKEN: {{ cert_api_token }}" "https://ousurvey.qualtrics.com/API/v3/responseexports/{{ cert_request_id }}/file" -o cert.zip
      ignore_errors: True

    - name: Unzip Response File
      unarchive:
        src: cert.zip
        dest: .
      ignore_errors: True

    - name: Import JSON as Variables
      set_fact:      
        cert_vars: "{{ lookup('file','Certificates.json') | from_json }}"
      ignore_errors: True

    - name: Check to see number of Certificates
      set_fact:
        cert_count: '{{ item.certcount }}'
      with_items: '{{ cert_vars.responses }}'

###### Certificate 01 ##########################################################################

    - name: Ensure Directories Exist for 1st Certificate
      file: 
        path: '{{ cert_file_path }}/{{ item.name01 }}'
        state: directory
      when: cert_count | int >= 1
      with_items: '{{ cert_vars.responses }}'
    
    - name: Download 1st Certificate and Place In Folder
      get_url:
        url: "{{ item.pdf01_FILE_ID }}"
        dest: "{{ cert_file_path }}/{{ item.name01 }}/{{ item.name01 }} {{ item.expire01 }}.pdf"
      with_items: "{{ cert_vars.responses }}"
      when: cert_count | int >= 1
      ignore_errors: yes
    
    - name: Rename 1st WC Cert
      command: mv -f "{{ cert_file_path }}/{{ item.name01 }}/{{ item.name01 }} {{ item.expire01 }}.pdf" "{{ cert_file_path }}/{{item.name01 }}/{{ item.name01 }} {{ item.expire01 }} WC {{ item.compexp01 }}.pdf"
      when: item.comp01 == "Yes"
      with_items: "{{ cert_vars.responses }}"
      when: cert_count | int >= 1
      ignore_errors: True
      delegate_to: localhost
          
    - name: Notify Slack of 1st File Completion
      slack:
        token: '{{ slack_token }}'
        msg: The COI for '{{ item.name01 }}' has been filed.
      with_items: "{{ cert_vars.responses }}"
      when: cert_count | int >= 1
          
